"use strict";(self.webpackChunkgalio=self.webpackChunkgalio||[]).push([[140],{8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},8936:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"get-started/modern-usage","title":"Modern Usage Patterns","description":"This guide covers modern Galio usage patterns, TypeScript support, and best practices.","source":"@site/docs/get-started/modern-usage.mdx","sourceDirName":"get-started","slug":"/get-started/modern-usage","permalink":"/docs/get-started/modern-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/galio-org/galio-org.github.io/tree/main/docs/get-started/modern-usage.mdx","tags":[],"version":"current","frontMatter":{"title":"Modern Usage Patterns","description":"This guide covers modern Galio usage patterns, TypeScript support, and best practices.","keywords":["Modern Usage","Modern Usage - Documentation"],"source_url":"/docs/get-started/modern-usage"},"sidebar":"tutorialSidebar","previous":{"title":"Galio Theme","permalink":"/docs/get-started/galio-theme"},"next":{"title":"Galio Components","permalink":"/docs/components"}}');var o=n(4848),r=n(8453);const a={title:"Modern Usage Patterns",description:"This guide covers modern Galio usage patterns, TypeScript support, and best practices.",keywords:["Modern Usage","Modern Usage - Documentation"],source_url:"/docs/get-started/modern-usage"},i=void 0,c={},l=[{value:"Modern Usage Patterns",id:"modern-usage-patterns",level:2},{value:"TypeScript Support",id:"typescript-support",level:3},{value:"Basic TypeScript Usage",id:"basic-typescript-usage",level:4},{value:"Modern React Patterns",id:"modern-react-patterns",level:3},{value:"Functional Components with Hooks",id:"functional-components-with-hooks",level:4},{value:"Best Practices",id:"best-practices",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"modern-usage-patterns",children:"Modern Usage Patterns"}),"\n",(0,o.jsx)(t.p,{children:"This guide covers modern Galio usage patterns, TypeScript support, and best practices."}),"\n",(0,o.jsx)(t.h3,{id:"typescript-support",children:"TypeScript Support"}),"\n",(0,o.jsx)(t.p,{children:"Galio provides full TypeScript support with proper type definitions."}),"\n",(0,o.jsx)(t.h4,{id:"basic-typescript-usage",children:"Basic TypeScript Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { Button, Input, Block, Text } from 'galio-framework';\n\ninterface UserFormProps {\n  onSubmit: (data: UserData) => void;\n}\n\nconst UserForm: React.FC<UserFormProps> = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  return (\n    <Block flex padding={20}>\n      <Input\n        placeholder=\"Name\"\n        value={name}\n        onChangeText={setName}\n        color=\"primary\"\n        rounded\n      />\n      <Button color=\"primary\" onPress={() => onSubmit({ name, email })}>\n        Submit\n      </Button>\n    </Block>\n  );\n};\n"})}),"\n",(0,o.jsx)(t.h3,{id:"modern-react-patterns",children:"Modern React Patterns"}),"\n",(0,o.jsx)(t.h4,{id:"functional-components-with-hooks",children:"Functional Components with Hooks"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import React, { useState, useEffect } from \'react\';\nimport { Block, Text, Button, Toast } from \'galio-framework\';\n\nconst Counter: React.FC = () => {\n  const [count, setCount] = useState(0);\n  const [showToast, setShowToast] = useState(false);\n\n  useEffect(() => {\n    if (count > 10) {\n      setShowToast(true);\n      setTimeout(() => setShowToast(false), 3000);\n    }\n  }, [count]);\n\n  return (\n    <Block flex center middle>\n      <Text h1>{count}</Text>\n      <Block row space="around">\n        <Button color="error" onPress={() => setCount(prev => prev - 1)}>\n          Decrease\n        </Button>\n        <Button color="success" onPress={() => setCount(prev => prev + 1)}>\n          Increase\n        </Button>\n      </Block>\n    </Block>\n  );\n};\n'})}),"\n",(0,o.jsx)(t.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Use TypeScript"})," for better type safety"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Prefer functional components"})," with hooks"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Use proper prop types"})," and interfaces"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Follow component composition"})," patterns"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Use theme constants"})," consistently"]}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.strong,{children:"Implement proper loading states"})}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Test your components"})," thoroughly"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Optimize for performance"})," when needed"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);